// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var message = Message.FromJson(jsonString);

namespace WebLancerHelper.WebLancer.Objects.Message
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MessageClass
    {
        [JsonProperty("sender_id")]
        public string SenderId { get; set; }

        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("message")]
        public string Message { get; set; }

        [JsonProperty("added_time")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AddedTime { get; set; }

        [JsonProperty("login")]
        public string Login { get; set; }

        [JsonProperty("time")]
        public string Time { get; set; }
    }

    public partial struct MessageUnion
    {
        public MessageClass[] MessageClassArray;
        public string String;

        public static implicit operator MessageUnion(MessageClass[] MessageClassArray) => new MessageUnion { MessageClassArray = MessageClassArray };
        public static implicit operator MessageUnion(string String) => new MessageUnion { String = String };
    }

    public class Message
    {
        public static MessageUnion[] FromJson(string json) => JsonConvert.DeserializeObject<MessageUnion[]>(json, Objects.Message.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MessageUnion[] self) => JsonConvert.SerializeObject(self, Objects.Message.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MessageUnionConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MessageUnionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MessageUnion) || t == typeof(MessageUnion?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new MessageUnion { String = stringValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<MessageClass[]>(reader);
                    return new MessageUnion { MessageClassArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type MessageUnion");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (MessageUnion)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.MessageClassArray != null)
            {
                serializer.Serialize(writer, value.MessageClassArray);
                return;
            }
            throw new Exception("Cannot marshal type MessageUnion");
        }

        public static readonly MessageUnionConverter Singleton = new MessageUnionConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
